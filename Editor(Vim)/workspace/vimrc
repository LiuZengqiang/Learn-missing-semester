" Comments in Vimscript start with a `"`.
" 在Vimscript中使用`"`表示注释

" If you open this file in Vim, it'll be syntax highlighted for you.
" 使用Vim打开文件，模式显示代码语法高亮

" Vim is based on Vi. Setting `nocompatible` switches from the default
" Vi-compatibility mode and enables useful Vim functionality. This
" configuration option turns out not to be necessary for the file named
" '~/.vimrc', because Vim automatically enters nocompatible mode if that file
" is present. But we're including it here just in case this config file is
" loaded some other way (e.g. saved as `foo`, and then Vim started with
" `vim -u foo`).
" Vim 基于 Vi. 通过设置 `nocompatible` 关闭兼容(Vi)模式，以启用Vim的全部功能。
" 实际上无需在'~/.vimrc'文件中显式的设置改参数，因为Vim默认启用 nocompatible
" 模式。我们在此处包含改参数是为了以防在启动Vim时通过加载其他文件作为配置文件时
" 不会默认开启 nocomatible（例如，假如使用 `foo` 文件作为Vim的参数文件，使用
" Vim -u foo 启动 Vim）
"
set nocompatible

" Turn on syntax highlighting.
" 启用语法高亮
syntax on

" Disable the default Vim startup message.
" 禁止显示 Vim 启动信息显示
set shortmess+=I

" Show line numbers.
" 显示行号
set number

" This enables relative line numbering mode. With both number and
" relativenumber enabled, the current line shows the true line number, while
" all other lines (above and below) are numbered relative to the current line.
" This is useful because you can tell, at a glance, what count is needed to
" jump up or down to a particular line, by {count}k to go up or {count}j to go
" down.
" 显示相对行号，只有光标所在行显示实际行号，其他行显示相对的行数。改配置可以帮助
" 在多行之间进行跳转时，使用 {相对行数}k/j 进行向上/向下跳转。
set relativenumber

" Always show the status line at the bottom, even if you only have one window open.
" 始终在窗口下方显示文件状态信息
set laststatus=2

" The backspace key has slightly unintuitive behavior by default. For example,
" by default, you can't backspace before the insertion point set with 'i'.
" This configuration makes backspace behave more reasonably, in that you can
" backspace over anything.
" 默认 backspace 键的功能并不复合直觉。例如，之后在插入字符后，才能使用
" backspace
" 按键删除字符，同时删除行首字符也不能自动删除该行。该参数配置可以使 backspace
" 按键与常用的删除功能相同。
set backspace=indent,eol,start

" By default, Vim doesn't let you hide a buffer (i.e. have a buffer that isn't
" shown in any window) that has unsaved changes. This is to prevent you from "
" forgetting about unsaved changes and then quitting e.g. via `:qa!`. We find
" hidden buffers helpful enough to disable this protection. See `:help hidden`
" for more information on this.
" 默认 Vim 不支持隐藏一个没有保存的 buffer。这样可以保证用户不会忘记没有保存
" 文件就退出。设置该参数可以允许用户在有未保存的修改时切换缓冲区，此时的保存由
" Vim 负责保存。
set hidden

" This setting makes search case-insensitive when all characters in the string
" being searched are lowercase. However, the search becomes case-sensitive if
" it contains any capital letters. This makes searching more convenient.
" 设置搜索字符串时是否区分大小写。
" ignorecase 忽略区分大小写
" smartcase 当被搜索字符串中存在大写时区分大小写，否则不区分
set ignorecase
set smartcase

" Enable searching as you type, rather than waiting till you press enter.
" 实时搜索，即输入一个字符即显示搜索结果，而不是知道按下回车再显示搜索结果
set incsearch

" Unbind some useless/annoying default key bindings.
" 解绑无用的按键绑定
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

" Disable audible bell because it's annoying.
" 禁止发出警报声音，因为这些声音很烦人
set noerrorbells visualbell t_vb=

" Enable mouse support. You should avoid relying on this too much, but it can
" sometimes be convenient.
" 启用鼠标支持。你应该尽量避免使用鼠标进行文本操作，尽管使用鼠标在某些情况下可能
" 会更加便利
" set mouse+={n,v,i,c,h,a}
" 设置在 normal, visual, insert, command, help模型下支持鼠标
" 如果在窗口 split 后无法使用鼠标，可能需要设置 set ttymouse=sgr
set mouse+=a

" Try to prevent bad habits like using the arrow keys for movement. This is
" not the only possible bad habit. For example, holding down the h/j/k/l keys
" for movement, rather than using more efficient movement commands, is also a
" bad habit. The former is enforceable through a .vimrc, while we don't know
" how to prevent the latter.
" Do this in normal mode...
" 为防止养成使用方向键控制光标的坏习惯，另外长按h/j/k/le进行光标移动而不是使用
" 命令跳转光标也是一个坏习惯。前者可以通过重映射方向键光标来阻止h用户使用方向键
" 进行移动光标，后者没有有效的方法进行阻止。
"
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>
" ...and in insert mode
" 重映射insert模式下的方向键功能
inoremap <Left>  <ESC>:echoe "Use h"<CR>
inoremap <Right> <ESC>:echoe "Use l"<CR>
inoremap <Up>    <ESC>:echoe "Use k"<CR>
inoremap <Down>  <ESC>:echoe "Use j"<CR>
